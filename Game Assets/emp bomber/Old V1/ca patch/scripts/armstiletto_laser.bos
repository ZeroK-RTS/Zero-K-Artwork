#define TAK			// This is a TA script

#include "constants.h"

piece  base, wing1, wing2, missle1, missle2, jet1, predrop, drop, x, z,
       jet2;

//fakeupright
#define FAKE_UPRIGHT_TARGET_PARENT	predrop
#define FAKE_UPRIGHT_TARGET_CHILD	drop	//piece to make upright
#define FAKE_UPRIGHT_REFERENCE		base	
#define FAKE_UPRIGHT_X				x	
#define FAKE_UPRIGHT_Z				z	

#include "fakeupright.h"

static-var  Static_Var_1, gun_3, firing, sound_index;

Sounds()
{
	play-sound("lghthvy1", 10);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from jet1;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from jet2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.000000> speed <120.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.000000> speed <180.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.000000>;
		Static_Var_1 = 0;
	}
}

Create()
{
	Static_Var_1 = 0;
	gun_3 = 0;
	sound_index = 0;
	hide missle1;
	hide missle2;
	move wing1 to x-axis [-0.004431] now;
	move wing2 to x-axis [0.004431] now;
	hide predrop;
	hide drop;
	call-script FakeUprightInit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	sleep 2000;
	show missle1;
	show missle2;
}

Activate()
{
	move wing1 to x-axis [2.900000] speed [20.044434];
	move wing2 to x-axis [-2.900000] speed [20.044434];
}

Deactivate()
{
	move wing1 to x-axis [0.000000] speed [10.022217];
	move wing2 to x-axis [0.000000] speed [10.022217];
}

QueryPrimary(piecenum)
{
	piecenum = drop;
}

FireLoop()
{
  While(firing)
  {
  	call-script FakeUprightTurn();
  	emit-sfx 2049 from drop;
  	if (sound_index == 0)
  	{
  	    GET PLAY_SOUND (0, 655360);
  	}
  	++sound_index;
  	if (sound_index >= 6)
  	{
  	    sound_index = 0;
  	}
  	sleep 25; // fire density
  }
}

FirePrimary()
{
	sleep 1300; // Delay before fire. For a burst 2, bursttime 5 bogus bomb, the target point is reached at about 2300.
	firing = 1; 
	start-script FireLoop();
	sleep 2030; // Duration of burst. The number of frames is roughly (time - 30) * 1000 / 30.
	firing = 0;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode wing1 type BITMAPONLY | BITMAP4;
		explode wing2 type BITMAPONLY | BITMAP5;
		explode missle1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode missle2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode jet1 type BITMAPONLY | BITMAP2;
		explode jet2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode wing1 type SHATTER | BITMAP4;
		explode wing2 type BITMAPONLY | BITMAP5;
		explode missle1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode missle2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode jet1 type FALL | SMOKE | FIRE | BITMAP2;
		explode jet2 type FALL | SMOKE | FIRE | BITMAP2;
		return (0);
	}
	corpsetype = 1;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP3;
		explode wing1 type BITMAPONLY | BITMAP4;
		explode wing2 type SHATTER | BITMAP5;
		explode missle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode missle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP3;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wing2 type BITMAPONLY | BITMAP5;
	explode missle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode missle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
